---Updating to bring in facility zip, facility state, facility city

--1A)creating the patient table from Condor
DROP TABLE IF EXISTS SANDBOX.Condor_Patient_counts_A;

CREATE TABLE SANDBOX.Condor_Patient_counts_A AS
SELECT 
claim_number,
Patient_Suffix, 
member_adr_zip as PatientZip, 
patient_gender as Gender,
year(patient_dob) as DOB, 
substring(RECEIVED_DATE, 0, 4) as YEAR, 
EXTRACT(MONTH FROM cast(RECEIVED_DATE as date)) as Month,
billing_pr_npi,
case 
when attending_pr_npi is not null and attending_pr_npi <> ''
then attending_pr_npi
when (attending_pr_npi is null or attending_pr_npi = '') and (referring_pr_npi is not null and referring_pr_npi <> '')
then referring_pr_npi
when (attending_pr_npi is null or attending_pr_npi = '') and (referring_pr_npi is null or billing_pr_npi = '')
then billing_pr_npi
else null
end as Rendering_pr_npi,
(trim(patient_suffix)||trim(member_adr_zip)||trim(payer_id)||trim(billing_pr_npi)||trim(to_date(received_date))) as Encounters
     
     FROM RWD.claim_record cl
     
     WHERE substring(RECEIVED_DATE, 0, 4) in ('2014', '2015', '2016', '2017');


--1B)joining in the npi information
drop table if exists SANDBOX.Condor_Patient_counts_B;

create table SANDBOX.Condor_Patient_counts_B as
select
cl.*,
cms.PROVIDER_BUSINESS_PRACTICE_LOCATION_ADDRESS_POSTAL_CODE as Facility_Zip,
cms.PROVIDER_BUSINESS_PRACTICE_LOCATION_ADDRESS_CITY_NAME as Facility_City,
cms.PROVIDER_BUSINESS_PRACTICE_LOCATION_ADDRESS_STATE_NAME as Facility_State
FROM SANDBOX.Condor_Patient_counts_A cl
left join srn_cmsnpi_latest cms
on cl.rendering_pr_npi = cms.npi;


--1C)joining in soundex key
drop table if exists SANDBOX.Condor_Patient_counts_C;

create table if not exists SANDBOX.Condor_Patient_counts_C as

select
upk.patient_address_1 as soundex_key,
cl.*

from SANDBOX.Condor_Patient_counts_B cl
left join RWD.Claims_UPK_Hash upk
on cl.claim_number = upk.claim_number;

select * from SANDBOX.Condor_Patient_counts_final limit 1000;

--2A)creating the patient table from Albatross
DROP TABLE IF EXISTS SANDBOX.Albatross_Patient_counts_A;

CREATE TABLE SANDBOX.Albatross_Patient_counts_A AS
SELECT 
patientaddress1 as soundex_key,
patientsuffix as Patient_Suffix, 
patientzipcode as Zip, 
patientsex as Gender, 
YEAR(patientdob) as DOB,
substring(Createdate, 0, 4) as YEAR,
 EXTRACT(MONTH FROM cast(Createdate as date)) as Month, 
billingprovnpi as billing_pr_npi,
case 
when renderingprovidernpi is not null and renderingprovidernpi <> ''
then renderingprovidernpi
when (renderingprovidernpi is null or renderingprovidernpi = '') and (referringprovnpi is not null and referringprovnpi <> '')
then referringprovnpi
when (renderingprovidernpi is null or renderingprovidernpi = '') and (referringprovnpi is null or referringprovnpi = '')
then billingprovnpi
else null
end as Rendering_pr_npi,
(trim(patientsuffix)||trim(patientzipcode)||trim(primarypayerid)||trim(billingprovnpi)||trim(to_date(Createdate))) as Encounters


FROM RWD.claims_header ch
    
WHERE substring(createdate, 0, 4) in ('2014', '2015', '2016', '2017');


--2B)joining in the npi information
drop table if exists SANDBOX.Allbatross_Patient_counts_B;

create table SANDBOX.Allbatross_Patient_counts_B as
select
cl.*,
cms.PROVIDER_BUSINESS_PRACTICE_LOCATION_ADDRESS_POSTAL_CODE as Facility_Zip,
cms.PROVIDER_BUSINESS_PRACTICE_LOCATION_ADDRESS_CITY_NAME as Facility_City,
cms.PROVIDER_BUSINESS_PRACTICE_LOCATION_ADDRESS_STATE_NAME as Facility_State
FROM SANDBOX.Albatross_Patient_counts_A cl
left join srn_cmsnpi_latest cms
on cl.rendering_pr_npi = cms.npi;

describe table SANDBOX.Condor_Patient_counts_C;

--3A)creating the patient table from Vulture

drop table if exists vul_counts_1;

create table vul_counts_1 as 
select 
processdate,
key2 as soundex_key,
claimid, 
key1 as patient_suffix, 
zip3 as zip,
SEX as gender, 
SUBSTRING(Yearofbirth,0,4) as dob, 
YEAR(TRY_TO_DATE(processdate)) as year, 
Month(TRY_TO_DATE(PROCESSDATE)) as Month
      
      from rwd.ability_vwpatient
      
      WHERE substring(processDATE, 0, 4) in ('2014', '2015', '2016', '2017');

 
--3B)getting the billing provider info
DROP TABLE IF EXISTS VUL_COUNTS_2;

CREATE TABLE VUL_COUNTS_2 AS 
select 
claimid, 
npi as billing_pr_npi,
'Null' as Rendering_PR_NPI,
'Null' as Referring_PR_NPI,
'Billing' as Type
from rwd.ability_vwbilling;


--3C)getting the rendering or referring pr info
DROP TABLE IF EXISTS VUL_COUNTS_3;

CREATE TABLE VUL_COUNTS_3 AS 
select 
claimid, 
'Null' as Billing_pr_npi,
case when type like 'Rendering%'
then NPI 
else null 
end 
as Rendering_PR_NPI,
case when type like 'Referring%'
then NPI 
else null 
end 
as Referring_PR_NPI,
type
from rwd.ability_vwclaimaffiliation
where type like 'Rendering%' or type like 'Referring%';

--checking these tables to see what they look like
/*select * from VUL_COUNTS_2 limit 50;
select * from VUL_COUNTS_3 limit 50;


--checking to see if we see more than npi per claim
select claimid, count(*) 
from vul_referring_npi 
group by claimid
order by count(*) desc
limit 1000;*/


--3D)joining in the billing, rendering, attending provider info
DROP TABLE IF EXISTS SANDBOX.Vulture_Patient_counts_D;

CREATE TABLE SANDBOX.Vulture_Patient_counts_D AS
SELECT 
a.processdate,
a.soundex_key,
a.claimid,
a.Patient_Suffix, 
a.Zip, 
a.Gender, 
a.DOB, 
a.YEAR, 
a.Month, 
c.Billing_PR_NPI,
E.Rendering_PR_NPI,
F.Referring_Pr_NPI
     
FROM vul_counts_1 A
       
LEFT JOIN vul_counts_2 C
      ON A.CLAIMID = C.CLAIMID
LEFT JOIN vul_counts_3 E
      ON A.CLAIMID = E.CLAIMID
LEFT JOIN vul_counts_3 F
      ON A.CLAIMID = F.CLAIMID;

--check for duplication here

--3E)determining who the rendering provider actually was
Drop table if exists vulture_E;

create table if not exists vulture_E as

select
processdate,
soundex_key,
claimid,
Patient_Suffix,
Zip,
Gender,
DOB,
Year,
Month,
Billing_PR_NPI,
case 
when rendering_pr_npi is not null and rendering_pr_npi <> ''
then rendering_pr_npi
when (rendering_pr_npi is null or rendering_pr_npi = '') and (referring_pr_npi is not null and referring_pr_npi <> '')
then referring_pr_npi
when (rendering_pr_npi is null or rendering_pr_npi = '') and (referring_pr_npi is null or billing_pr_npi = '')
then billing_pr_npi
else null
end as officialrendering

from SANDBOX.Vulture_Patient_counts_D;


--3F)joining in the npi related info for the rendering provider, and also payerid

drop table if exists SANDBOX.Vulture_F;

create table SANDBOX.Vulture_F as
select
cl.*,
cms.PROVIDER_BUSINESS_PRACTICE_LOCATION_ADDRESS_POSTAL_CODE as Facility_Zip,
cms.PROVIDER_BUSINESS_PRACTICE_LOCATION_ADDRESS_CITY_NAME as Facility_City,
cms.PROVIDER_BUSINESS_PRACTICE_LOCATION_ADDRESS_STATE_NAME as Facility_State
FROM SANDBOX.Vulture_E cl
left join srn_cmsnpi_latest cms
on cl.officialrendering = cms.npi;


--3G)Joining in payerid info
DROP TABLE IF EXISTS SANDBOX.Vulture_G;

CREATE TABLE IF NOT EXISTS SANDBOX.Vulture_G as
select 
cl.*,
pay.payerid

from SANDBOX.Vulture_F cl
left join RWD.ABILITY_VWPAYER pay
on cl.claimid = pay.claimid;

--check for duplication here

--3H)creating the field for encounters
drop table if exists SANDBOX.Vulture_H;

create table if not exists SANDBOX.Vulture_H as

select 
soundex_key,
Patient_Suffix,
Zip,
Gender,
DOB,
Year,
Month,
Billing_PR_NPI,
officialrendering as rendering_pr_npi,
(trim(patient_suffix)||trim(zip)||trim(payerid)||trim(billing_pr_npi)||trim(to_date(processdate))) as Encounters,
Facility_Zip,
Facility_City,
Facility_State

from SANDBOX.vulture_G;

describe table condor_patient_counts_C;
describe table allbatross_patient_counts_B;
describe table Vulture_H;

alter table condor_patient_counts_C drop column claim_number;


--4)unioning all the tables with patients together
drop table if exists total_patient_counts;

create table total_patient_counts as
(select * from condor_patient_counts_c)
UNION
(select * from allbatross_patient_counts_b)
UNION
(select * from Vulture_H);

select * from total_patient_counts_info limit 1000;


select * from total_patient_counts limit 10;

--4A)***creating the patientinfo for all the tables, need to group to bring records together
drop table if exists total_patient_counts_info;

create table if not exists total_patient_counts_info as

select 
SOUNDEX_KEY,
PATIENT_SUFFIX,
PATIENTZIP, 
GENDER,
DOB,
YEAR,
MONTH,
(trim(PATIENT_SUFFIX)||trim(SOUNDEX_KEY)||trim(PATIENTZIP)||trim(GENDER)||trim(DOB)||trim(YEAR)||trim(MONTH)) as patientinfo

from total_patient_counts

group by 
SOUNDEX_KEY,
PATIENT_SUFFIX,
PATIENTZIP, 
GENDER,
DOB,
YEAR,
MONTH,
(trim(PATIENT_SUFFIX)||trim(SOUNDEX_KEY)||trim(PATIENTZIP)||trim(GENDER)||trim(DOB)||trim(YEAR)||trim(MONTH));



select count(*) from total_patient_counts;

--4B)***first count for billing_npi, to be joined in later
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_A;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_A as

select
patientinfo,
count(distinct BILLING_PR_NPI) as COUNT_DISTINCT_BILLING_NPI

from total_patient_counts

group by
patientinfo;



--4C)***second count for rendering_npi, to be joined in later
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_B;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_B as

select
patientinfo,
count(distinct RENDERING_PR_NPI) as COUNT_DISTINCT_RENDERING_NPI

from total_patient_counts

group by 
patientinfo;



--4D)***third count for encounters
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_C;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_C as

select
patientinfo,
count(distinct Encounters) as Number_of_Encounters

from total_patient_counts

group by 
patientinfo;


--4E1)fourth count for facility zip, trimming the facility zip
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_D1;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_D1 as

select
patientinfo,
trim(FACILITY_ZIP) as FACILITY_ZIP

from total_patient_counts;

--4E2)***fourth count for facility zip, getting count distinct of the facility zip
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_D2;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_D2 as

select
patientinfo,
count(distinct FACILITY_ZIP) as COUNT_DISTINCT_FACILITY_ZIP

from ALL_PATIENTS_CAV_D1

group by 
patientinfo;


----------------------------------------
select * from ALL_PATIENTS_CAV_D2 limit 1000;


--4F1)fifth count for facility city, trim

DROP TABLE IF EXISTS ALL_PATIENTS_CAV_E1;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_E1 as

select
patientinfo,
trim(FACILITY_CITY) as FACILITY_CITY

from total_patient_counts;


--4F2)fifth count for facility city, lower case
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_E2;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_E2 as

select
patientinfo,
lower(FACILITY_CITY) as FACILITY_CITY

from ALL_PATIENTS_CAV_E1;


--4F3)***fifth count for facility city, count distinct
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_E3;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_E3 as

select
patientinfo,
count(distinct FACILITY_CITY) as COUNT_DISTINCT_FACILITY_CITY

from ALL_PATIENTS_CAV_E2

group by patientinfo;


--4G1)sixth count for facility state, trim
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_F1;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_F1 as

select
patientinfo,
trim(FACILITY_STATE) as FACILITY_STATE

from total_patient_counts;


--4G2)sixth count for facility state, lcase
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_F2;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_F2 as

select
patientinfo,
lower(FACILITY_STATE) as FACILITY_STATE

from ALL_PATIENTS_CAV_F1;


--4G3)sixth count for facility state, assigning state name
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_F3;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_F3 as

select
patientinfo,
CASE WHEN FACILITY_STATE in ('alabama','al') THEN 'ALABAMA'
WHEN FACILITY_STATE in ('alaska','ak', 'ak- alaska') THEN 'ALASKA'
WHEN FACILITY_STATE in ('arizona','az', 'az- arizona') THEN 'ARIZONA'
WHEN FACILITY_STATE in ('arkansas','ar', 'ar - arkansas') THEN 'ARKANSAS'
WHEN FACILITY_STATE in ('california','ca', 'baja california', 'ca - california') THEN 'CALIFORNIA'
WHEN FACILITY_STATE in ('colorado','co') THEN 'COLORADO'
WHEN FACILITY_STATE in ('connecticut','ct') THEN 'CONNECTICUT'
WHEN FACILITY_STATE in ('delaware','de') THEN 'DELAWARE'
WHEN FACILITY_STATE in ('florida','fl', 'florida (fl)') THEN 'FLORIDA'
WHEN FACILITY_STATE in ('georgia','ga', 'ga - georgia') THEN 'GEORGIA'
WHEN FACILITY_STATE in ('hawaii','hi') THEN 'HAWAII'
WHEN FACILITY_STATE in ('idaho','id') THEN 'IDAHO'
WHEN FACILITY_STATE in ('illinois','il') THEN 'ILLINOIS'
WHEN FACILITY_STATE in ('indiana','in') THEN 'INDIANA'
WHEN FACILITY_STATE in ('iowa','ia') THEN 'IOWA'
WHEN FACILITY_STATE in ('kansas','ks') THEN 'KANSAS'
WHEN FACILITY_STATE in ('kentucky','ky') THEN 'KENTUCKY'
WHEN FACILITY_STATE in ('louisiana','la') THEN 'LOUISIANA'
WHEN FACILITY_STATE in ('maine','me') THEN 'MAINE'
WHEN FACILITY_STATE in ('maryland','md', 'district of columbia', 'dc') THEN 'MARYLAND'
WHEN FACILITY_STATE in ('massachusetts','ma') THEN 'MASSACHUSETTS'
WHEN FACILITY_STATE in ('michigan','mi') THEN 'MICHIGAN'
WHEN FACILITY_STATE in ('minnesota','mn') THEN 'MINNESOTA'
WHEN FACILITY_STATE in ('mississippi','ms') THEN 'MISSISSIPPI'
WHEN FACILITY_STATE in ('missouri','mo') THEN 'MISSOURI'
WHEN FACILITY_STATE in ('montana','mt') THEN 'MONTANA'
WHEN FACILITY_STATE in ('nebraska','ne') THEN 'NEBRASKA'
WHEN FACILITY_STATE in ('nevada','nv') THEN 'NEVADA'
WHEN FACILITY_STATE in ('new hampshire','nh') THEN 'NEW HAMPSHIRE'
WHEN FACILITY_STATE in ('new jersey','nj') THEN 'NEW JERSEY'
WHEN FACILITY_STATE in ('new mexico','nm') THEN 'NEW MEXICO'
WHEN FACILITY_STATE in ('new york','ny') THEN 'NEW YORK'
WHEN FACILITY_STATE in ('north carolina','nc') THEN 'NORTH CAROLINA'
WHEN FACILITY_STATE in ('north dakota','nd') THEN 'NORTH DAKOTA'
WHEN FACILITY_STATE in ('ohio','oh') THEN 'OHIO'
WHEN FACILITY_STATE in ('oklahoma','ok') THEN 'OKLAHOMA'
WHEN FACILITY_STATE in ('oregon','or') THEN 'OREGON'
WHEN FACILITY_STATE in ('pennsylvania','pa') THEN 'PENNSYLVANIA'
WHEN FACILITY_STATE in ('rhode island','ri') THEN 'RHODE ISLAND'
WHEN FACILITY_STATE in ('south carolina','sc') THEN 'SOUTH CAROLINA'
WHEN FACILITY_STATE in ('south dakota','sd') THEN 'SOUTH DAKOTA'
WHEN FACILITY_STATE in ('tennessee','tn') THEN 'TENNESSEE'
WHEN FACILITY_STATE in ('texas','tx', 'tx - texas') THEN 'TEXAS'
WHEN FACILITY_STATE in ('utah','ut') THEN 'UTAH'
WHEN FACILITY_STATE in ('vermont','vt') THEN 'VERMONT'
WHEN FACILITY_STATE in ('virginia','va', 'va - virginia') THEN 'VIRGINIA'
WHEN FACILITY_STATE in ('washington','wa') THEN 'WASHINGTON'
WHEN FACILITY_STATE in ('west virginia','wv') THEN 'WEST VIRGINIA'
WHEN FACILITY_STATE in ('wisconsin','wi') THEN 'WISCONSIN'
WHEN FACILITY_STATE in ('wyoming','wy') THEN 'WYOMING'
ELSE 'UNKNOWN'
END
as FACILITY_STATE_NAME


from ALL_PATIENTS_CAV_F2;


----checking that state names are being made properly
select * from ALL_PATIENTS_CAV_F3 limit 100;


--4G4)***sixth count for facility state, count distinct
DROP TABLE IF EXISTS ALL_PATIENTS_CAV_F4;

CREATE TABLE IF NOT EXISTS ALL_PATIENTS_CAV_F4 as

select
patientinfo,
count(distinct FACILITY_STATE_NAME) as COUNT_DISTINCT_FACILITY_STATE

from ALL_PATIENTS_CAV_F3

where FACILITY_STATE_NAME <> 'UNKNOWN'
group by patientinfo;



--5)bringing in billing info
drop table if exists allpatients_b;

create table allpatients_b as 
select 
a.*, 
b.count_distinct_billing_npi as Count_of_billing

from total_patient_counts_info a
left join all_patients_cav_a b
on a.patientinfo=b.patientinfo;


--6)bringing in rendering info
drop table if exists allpatients_br;

create table allpatients_br as 
select 
a.*, 
b.count_distinct_rendering_npi as Count_of_rendering

from allpatients_b a
left join all_patients_cav_b b
on a.patientinfo=b.patientinfo;

--7)bringing in encounters

drop table if exists allpatients_bre;

create table allpatients_bre as 
select 
a.*, 
b.Number_Of_Encounters as Count_Of_Encounters

from allpatients_br a
left join all_patients_cav_c b
on a.patientinfo=b.patientinfo;

--8)bringing in facility zip

drop table if exists allpatients_brez;

create table allpatients_brez as 
select 
a.*, 
b.COUNT_DISTINCT_FACILITY_ZIP as Count_Facility_Zips

from allpatients_bre a
left join all_patients_cav_d2 b
on a.patientinfo = b.patientinfo;

--9)bringing in facility city
drop table if exists allpatients_brezc;

create table allpatients_brezc as 
select 
a.*, 
b.COUNT_DISTINCT_FACILITY_CITY as Count_Facility_City

from allpatients_brez a
left join ALL_PATIENTS_CAV_E3 b
on a.patientinfo = b.patientinfo;

--10)bringing in facility state, this is the final join
drop table if exists allpatients_brezcs;

create table allpatients_brezcs as 
select 
a.*, 
b.COUNT_DISTINCT_FACILITY_STATE as Count_Facility_State

from allpatients_brezc a
left join ALL_PATIENTS_CAV_F4 b
on a.patientinfo = b.patientinfo;

select * from allpatients_b limit 100;

---checking the final table to see it is working properly
select * from allpatients_brezcs limit 10;
